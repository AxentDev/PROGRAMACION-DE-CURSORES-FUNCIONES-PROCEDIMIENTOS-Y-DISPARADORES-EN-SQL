------------------CÓDIGOS SEGUNDO LABORATORIO BASES DE DATOS - ALEJANDRO DE MENDOZA - ORACLE - APEX------------------------------

***CREAR TABLA PRODUCTOS***

CREATE TABLE "PRODUCTOS" 
(	
	"ID_PRODUCTO" NUMBER, 
	"NOMBRE" VARCHAR2(50), 
	"PRECIO" NUMBER, 
	"STOCK" NUMBER
);

----------------------------------------------------------------------------------------------------------------------------------

***INSERTAR DATOS EN TABLA PRODUCTOS***

INSERT INTO productos VALUES (1, 'Producto A', 50, 100);
INSERT INTO productos VALUES (2, 'Producto B', 75, 80);
INSERT INTO productos VALUES (3, 'Producto C', 60, 120);
INSERT INTO productos VALUES (4, 'Producto D', 90, 60);

----------------------------------------------------------------------------------------------------------------------------------

***CREAR TABLA REGISTRO_VENTAS***

CREATE TABLE "REGISTRO_VENTAS" 
(	
	"ID_VENTA" NUMBER, 
	"ID_PRODUCTO" NUMBER, 
	"CANTIDAD" NUMBER, 
	"FECHA_VENTA" DATE
);

----------------------------------------------------------------------------------------------------------------------------------

***CREAR PROCEDIMIENTO CALCULAR_TOTAL_VENTAS***

create or replace PROCEDURE calcular_total_ventas IS
  CURSOR ventas_cursor IS
    SELECT rv.id_producto, rv.cantidad, p.precio
    FROM registro_ventas rv
    JOIN productos p ON rv.id_producto = p.id_producto;

  v_total_ventas NUMBER := 0;
  v_precio NUMBER;
  v_cantidad NUMBER;
BEGIN
  -- Abrir el cursor y calcular el total de ventas
  FOR venta IN ventas_cursor LOOP
    v_precio := venta.precio;
    v_cantidad := venta.cantidad;

    -- Sumar el total de ventas
    v_total_ventas := v_total_ventas + (v_precio * v_cantidad);
  END LOOP;

  -- Mostrar el total de ventas
  DBMS_OUTPUT.PUT_LINE('El total de ventas es: ' || v_total_ventas);
END calcular_total_ventas;

----------------------------------------------------------------------------------------------------------------------------------

***EJECUCIÓN PROCEDIMIENTO CALCULAR_TOTAL_VENTAS INICIAL SIN DATOS***

BEGIN
  calcular_total_ventas;
END;

----------------------------------------------------------------------------------------------------------------------------------

***INSERTAR DATOS EN TABLA REGISTRO_VENTAS***

INSERT INTO registro_ventas VALUES (1, 1, 10, TO_DATE('2024-11-24', 'YYYY-MM-DD'));
INSERT INTO registro_ventas VALUES (2, 2, 5, TO_DATE('2024-11-24', 'YYYY-MM-DD'));
INSERT INTO registro_ventas VALUES (3, 3, 8, TO_DATE('2024-11-24', 'YYYY-MM-DD'));
INSERT INTO registro_ventas VALUES (4, 4, 12, TO_DATE('2024-11-24', 'YYYY-MM-DD'));

----------------------------------------------------------------------------------------------------------------------------------

***EJECUCIÓN PROCEDIMIENTO CALCULAR_TOTAL_VENTAS FINAL CON DATOS***

BEGIN
  calcular_total_ventas;
END;

----------------------------------------------------------------------------------------------------------------------------------

***CREACIÓN FUNCIÓN DE OBTENER_STOCK_PRODUCTO***

create or replace FUNCTION obtener_stock_producto (
    p_id_producto IN NUMBER
) RETURN NUMBER IS
    v_stock NUMBER;
BEGIN
    SELECT stock
    INTO v_stock
    FROM productos
    WHERE id_producto = p_id_producto;

    RETURN v_stock;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
    WHEN OTHERS THEN
        RETURN NULL;
END obtener_stock_producto;

----------------------------------------------------------------------------------------------------------------------------------

***EJECUCIÓN FUNCIÓN DE OBTENER_STOCK_PRODUCTO***

SELECT obtener_stock_producto() FROM dual;-- Ingresar el ID del producto dentro de los parentesis.

----------------------------------------------------------------------------------------------------------------------------------

***CONSULTA PARA SELECCIONAR Y DEVOLVER EL STOCK DEL PRODUCTO CORRESPONDIENTE AL ID PROPORCIONADO***

SELECT stock
FROM productos
WHERE id_producto = :id_producto;

----------------------------------------------------------------------------------------------------------------------------------

***CREAR PROCEDIMIENTO ACTUALIZAR_STOCK***

create or replace PROCEDURE actualizar_stock (
    p_id_producto IN NUMBER,  
    p_cantidad_vendida IN NUMBER  
) IS
    v_stock NUMBER;  
BEGIN
    SELECT stock
    INTO v_stock
    FROM productos
    WHERE id_producto = p_id_producto;
    
    IF v_stock >= p_cantidad_vendida THEN
        UPDATE productos
        SET stock = stock - p_cantidad_vendida
        WHERE id_producto = p_id_producto;
        
        DBMS_OUTPUT.PUT_LINE('El stock del producto ID ' || p_id_producto || ' ha sido actualizado.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('No hay suficiente stock para el producto ID ' || p_id_producto || '.');
    END IF;
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró el producto con ID ' || p_id_producto || '.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Ocurrió un error al actualizar el stock.');
END actualizar_stock;

----------------------------------------------------------------------------------------------------------------------------------

***CÓDIGO PARA ACTUALIZAR STOCK DE LOS PRODUCTOS***

BEGIN
    actualizar_stock(1, 10);
END;

----------------------------------------------------------------------------------------------------------------------------------

***CREACIÓN DEL DISPARADOR (TRIGGER)***

CREATE OR REPLACE TRIGGER trg_actualizar_stock
BEFORE INSERT ON registro_ventas
FOR EACH ROW
BEGIN
  NULL; 
END;

----------------------------------------------------------------------------------------------------------------------------------

***DISPARADOR PARA LLAMAR AL PROCEDIMIENTO “ACTUALIZAR_STOCK” CON VALORES DEL NUEVO PRODUCTO Y CANTIDAD A INSERTAR***

CREATE OR REPLACE TRIGGER trg_actualizar_stock
BEFORE INSERT ON registro_ventas
FOR EACH ROW
BEGIN
  -- Llamar al procedimiento actualizar_stock con los valores del nuevo registro
  actualizar_stock(:NEW.id_producto, :NEW.cantidad);
END;

----------------------------------------------------------------------------------------------------------------------------------

***CODIGO INSERCIÓN EN TABLA REGISTRO_VENTAS PARA ACTIVAR DISPARADOR (TRIGGER)***

INSERT INTO registro_ventas (id_venta, id_producto, cantidad, fecha_venta)
VALUES (1, 1, 5, SYSDATE);

----------------------------------------------------------------------------------------------------------------------------------











